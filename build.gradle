/*
 * Copyright 2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.palantir.gradle.gitversion:gradle-git-version:0.12.2"
    }
}

apply plugin: "com.palantir.git-version"

version = normalizedVersion()

subprojects {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "http://dl.bintray.com/spinnaker/spinnaker/" }
    }

    apply plugin: "java"
    apply plugin: "maven-publish"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = "com.jonsie.spinnaker.plugin.echo.rest"
    version = rootProject.version

    // TODO(rz): Blech.
    dependencies {
        annotationProcessor "org.pf4j:pf4j:3.1.0"
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/robzienert/spinnaker-plugin-helloworld")
                credentials(HttpHeaderCredentials) {
                    name = "Authorization"
                    value = "Bearer ${System.getenv("GITHUB_TOKEN")}"
                }
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                from(components.java)
            }
        }
    }
}

String normalizedVersion() {
    String fullVersion = gitVersion()
    String normalized = fullVersion.split("-").first()
    if (fullVersion.contains("dirty")) {
        return "$normalized-SNAPSHOT"
    } else {
        return normalized
    }
}
